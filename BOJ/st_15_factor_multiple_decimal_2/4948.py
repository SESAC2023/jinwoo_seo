import sys
input = sys.stdin.readline
import math

num = 123456*2+1
num_list = [1]*num
for i in range(1, num):
    if i == 1:
        continue
    for j in range(2, int(math.sqrt(i))+1):
        if i % j == 0:
            num_list[i] = 0
            break

while True:
    n = int(input())
    
    if n == 0:
        break
    
    prime = 0
    for i in range(n+1, 2*n+1):
            prime += num_list[i]
    print(prime)
'''
1. 에라토스테네스의 체를 이용하되, 함수 생성이 아닌 시간을 단축시킬 방법이 필요하다.
2. 이는 코드가 실행됨가 동시에 미리 입력될 수들까지의 소수를 미리 구한 뒤, 
  소수의 개수를 더해주어 소수의 개수를 구하는 것이다.
3. 해당 문제는 123456까지라는 제한된 수가 존재하므로, 123456*2 + 1개의 인자가 1 인 리스트를 생성한다.
  (이때 첫 번째 리스트는 사용되지 않기 때문에 + 1을 하는 것이다.)
4. 첫 번째 for문에서 1부터 123456*2 까지 순회하며 소수를 찾는다.
5. 1은 소수가 될 수 없으므로 넘어가고, 2부터 에라토스테네스의 체를 이용하여 두 번째 for문을 순회한다.
6. 2부터 첫 번째 for문에서 전달받은 i의 제곱근 까지 순회하며, i가 자신의 수 이하의 숫자에 의해 나누었졌을 때 
  나머지가 0인 경우, 해당 인덱스의 값을 0으로 변경하고, for문을 탈출한다. 
  이 때 해당 숫자가 소수인 경우, 해당 인덱스의 리스트 값은 여전히 1이다.
7. while문을 통해 각 n을 입력받고, n이 0이 될 경우, while문을 멈춘다.
8. 소수의 개수를 구하기 위해 prime 변수를 선언하고, n 초과 2n 이하의 소수 개수를 for문을 통해 구한 뒤, 
  for문이 끝날 경우 prime 변수를 출력하여 값을 구한다.
'''
